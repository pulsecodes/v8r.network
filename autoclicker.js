(function() { let clickInterval; let isRunning = false; let targetX = 0; let targetY = 0; let clicksPerSecond = 10; let isDragging = false; let previewMode = false; const cpsControl = document.createElement('div'); cpsControl.style.cssText = ` position: fixed; bottom: 20px; left: 20px; padding: 10px; background-color: white; border: 2px solid #5D5CDE; border-radius: 5px; z-index: 10000; box-shadow: 0 2px 5px rgba(0,0,0,0.2); display: flex; flex-direction: column; gap: 5px; `; const cpsLabel = document.createElement('div'); cpsLabel.style.cssText = ` font-size: 12px; font-weight: bold; color: #5D5CDE; text-align: center; `; cpsLabel.textContent = `CPS: ${clicksPerSecond}`; const cpsSlider = document.createElement('input'); cpsSlider.type = 'range'; cpsSlider.min = '1'; cpsSlider.max = '100'; cpsSlider.value = clicksPerSecond; cpsSlider.style.cssText = ` width: 150px; `; cpsSlider.addEventListener('input', function() { clicksPerSecond = parseInt(cpsSlider.value); cpsLabel.textContent = `CPS: ${clicksPerSecond}`; if (isRunning) { stopClicking(); startClicking(); } }); cpsControl.appendChild(cpsLabel); cpsControl.appendChild(cpsSlider); document.body.appendChild(cpsControl); const exitButton = document.createElement('div'); exitButton.style.cssText = ` position: fixed; bottom: 20px; right: 20px; padding: 10px 20px; background-color: #5D5CDE; color: white; border-radius: 5px; font-weight: bold; cursor: pointer; z-index: 10000; box-shadow: 0 2px 5px rgba(0,0,0,0.2); `; exitButton.textContent = 'EXIT'; exitButton.onclick = function() { stopClicking(); exitButton.remove(); marker.remove(); clickMarker.remove(); cpsControl.remove(); document.removeEventListener('mousemove', mouseMoveHandler); document.removeEventListener('mouseup', mouseUpHandler); document.removeEventListener('click', clickHandler); window.autoClicker = undefined; console.log('Auto Clicker script removed'); }; document.body.appendChild(exitButton); const marker = document.createElement('div'); marker.style.cssText = ` position: fixed; width: 100px; height: 100px; border-radius: 50%; border: 2px solid #5D5CDE; display: flex; justify-content: center; align-items: center; color: #5D5CDE; font-weight: bold; pointer-events: none; z-index: 9999; transform: translate(-50%, -50%); text-align: center; font-size: 12px; background-color: rgba(93, 92, 222, 0.1); `; marker.innerHTML = 'CLICK<br>STARTING<br>POSITION'; document.body.appendChild(marker); const clickMarker = document.createElement('div'); clickMarker.style.cssText = ` position: fixed; width: 40px; height: 40px; border-radius: 50%; border: 2px solid #5D5CDE; background-color: rgba(93, 92, 222, 0.3); display: none; z-index: 9999; transform: translate(-50%, -50%); cursor: move; `; const statusLabel = document.createElement('div'); statusLabel.style.cssText = ` position: absolute; bottom: -20px; left: 50%; transform: translateX(-50%); white-space: nowrap; font-size: 10px; background-color: #5D5CDE; color: white; padding: 2px 5px; border-radius: 3px; `; statusLabel.textContent = 'PREVIEW MODE'; clickMarker.appendChild(statusLabel); const closeButton = document.createElement('div'); closeButton.style.cssText = ` position: absolute; top: -10px; right: -10px; width: 20px; height: 20px; background-color: #5D5CDE; color: white; border-radius: 50%; display: flex; justify-content: center; align-items: center; cursor: pointer; font-size: 12px; font-weight: bold; `; closeButton.textContent = 'X'; closeButton.onclick = function(e) { e.stopPropagation(); stopClicking(); marker.style.display = 'flex'; clickMarker.style.display = 'none'; console.log('Click position reset. Click to set a new position.'); }; clickMarker.appendChild(closeButton); document.body.appendChild(clickMarker); clickMarker.addEventListener('mousedown', function(e) { if (e.target === closeButton) return; isDragging = true; e.preventDefault(); }); const mouseMoveHandler = function(e) { if (marker.style.display === 'flex') { marker.style.left = e.clientX + 'px'; marker.style.top = e.clientY + 'px'; } if (isDragging) { targetX = e.clientX; targetY = e.clientY; clickMarker.style.left = targetX + 'px'; clickMarker.style.top = targetY + 'px'; } }; const mouseUpHandler = function() { if (isDragging) { console.log(`Position updated to X: ${targetX}, Y: ${targetY}`); isDragging = false; } }; const clickHandler = function(e) { if (marker.style.display === 'flex' && !isRunning) { targetX = e.clientX; targetY = e.clientY; console.log(`Position set to X: ${targetX}, Y: ${targetY}`); marker.style.display = 'none'; clickMarker.style.display = 'block'; clickMarker.style.left = targetX + 'px'; clickMarker.style.top = targetY + 'px'; startClicking(); } }; document.addEventListener('mousemove', mouseMoveHandler); document.addEventListener('mouseup', mouseUpHandler); document.addEventListener('click', clickHandler); function startClicking() { if (isRunning) return; isRunning = true; updateStatusLabel(); console.log(`Auto clicking at X: ${targetX}, Y: ${targetY} (${clicksPerSecond} clicks per second)`); console.log('Press the X button to stop and reset position'); clickInterval = setInterval(() => { clickMarker.style.backgroundColor = 'rgba(93, 92, 222, 0.6)'; setTimeout(() => { clickMarker.style.backgroundColor = 'rgba(93, 92, 222, 0.3)'; }, 50); if (!previewMode) { const clickEvent = new MouseEvent('click', { view: window, bubbles: true, cancelable: true, clientX: targetX, clientY: targetY }); document.elementFromPoint(targetX, targetY)?.dispatchEvent(clickEvent); } }, 1000 / clicksPerSecond); } function updateStatusLabel() { statusLabel.textContent = previewMode ? 'PREVIEW MODE' : 'CLICKING'; statusLabel.style.backgroundColor = previewMode ? '#5D5CDE' : '#ff4757'; } function stopClicking() { clearInterval(clickInterval); isRunning = false; console.log('Auto clicking stopped'); } marker.style.left = (window.innerWidth / 2) + 'px'; marker.style.top = (window.innerHeight / 2) + 'px'; window.autoClicker = { stop: function() { stopClicking(); marker.style.display = 'flex'; clickMarker.style.display = 'none'; console.log('Auto clicker stopped. Click to set a new position.'); }, setSpeed: function(cps) { if (cps > 0 && cps <= 50) { clicksPerSecond = cps; console.log(`Click speed set to ${cps} clicks per second`); if (isRunning) { stopClicking(); startClicking(); } } else { console.log('Speed must be between 1 and 50 clicks per second'); } }, previewMode: function(enabled) { previewMode = enabled; console.log(`Preview mode ${previewMode ? 'enabled' : 'disabled'}`); updateStatusLabel(); if (isRunning) { stopClicking(); startClicking(); } }, status: function() { console.log(`Status: ${isRunning ? 'Running' : 'Stopped'}`); console.log(`Mode: ${previewMode ? 'Preview (not clicking)' : 'Active (clicking)'}`); console.log(`Position: X: ${targetX}, Y: ${targetY}`); console.log(`Speed: ${clicksPerSecond} clicks per second`); }, start: function() { if (!isRunning && clickMarker.style.display === 'block') { startClicking(); } else if (marker.style.display === 'flex') { console.log('Set a position first by clicking on the screen'); } } }; console.log('Enhanced Auto Clicker initialized!'); console.log('Move your mouse and click to set the target position'); console.log('You can drag the purple marker to reposition it'); console.log('Current mode: ACTIVE (actually clicking)'); console.log(''); console.log('Additional commands:'); console.log('- autoClicker.previewMode(false) - Enable actual clicking (true = preview only)'); console.log('- autoClicker.stop() - Stop and reset position'); console.log('- autoClicker.start() - Start clicking at current position'); console.log('- autoClicker.setSpeed(10) - Change clicks per second (1-50)'); console.log('- autoClicker.status() - Show current status');})();
